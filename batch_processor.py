#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–æ–∫ –∏–∑ CSV —Ñ–∞–π–ª–∞
–ß–∏—Ç–∞–µ—Ç playlist.csv –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ m3u8 —Å—Å—ã–ª–∫–∏
"""

import os
import sys
import csv
import subprocess
import argparse
from pathlib import Path
from datetime import datetime
import time
import re


class BatchProcessor:
    def __init__(self, csv_file: str = "playlist.csv", output_dir: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        :param csv_file: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        :param output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        self.csv_file = Path(csv_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not self.csv_file.exists():
            raise FileNotFoundError(f"CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_file}")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if output_dir:
            self.output_dir = Path(output_dir)
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.output_dir = Path(f"batch_output_{timestamp}")
        
        self.output_dir.mkdir(exist_ok=True)
        
        # –õ–æ–≥ —Ñ–∞–π–ª
        self.log_file = self.output_dir / "batch_processing.log"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_modules = 0
        self.processed_modules = 0
        self.failed_modules = []
        self.skipped_modules = []
        
        self._init_logging()
    
    def _init_logging(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log_messages = []
        self._log(f"="*60)
        self._log(f"Batch Processor –∑–∞–ø—É—â–µ–Ω: {datetime.now()}")
        self._log(f"CSV —Ñ–∞–π–ª: {self.csv_file}")
        self._log(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
        self._log(f"="*60)
    
    def _log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        self.log_messages.append(log_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + '\n')
    
    def _sanitize_filename(self, module_name: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –º–æ–¥—É–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        :param module_name: –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–º—è –º–æ–¥—É–ª—è
        :return: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        """
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "7. Creating..." -> "Creating...")
        module_name = re.sub(r'^\d+\.\s*', '', module_name)
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            module_name = module_name.replace(char, '_')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(module_name) > 100:
            module_name = module_name[:100]
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        module_name = module_name.strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
        module_name = re.sub(r'\s+', ' ', module_name)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        module_name = module_name.replace(' ', '_')
        
        return module_name or "module"
    
    def read_csv(self) -> list:
        """
        –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
        
        :return: –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π —Å —Å—Å—ã–ª–∫–∞–º–∏
        """
        modules = []
        
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as f:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                sample = f.read(1024)
                f.seek(0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                sniffer = csv.Sniffer()
                delimiter = sniffer.sniff(sample).delimiter
                
                # –ß–∏—Ç–∞–µ–º CSV
                reader = csv.DictReader(f, delimiter=delimiter)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
                if reader.fieldnames:
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã)
                    fieldnames = [field.strip() for field in reader.fieldnames]
                    
                    # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫–∏ Module –∏ Link
                    module_col = None
                    link_col = None
                    
                    for field in fieldnames:
                        if 'module' in field.lower():
                            module_col = field
                        elif 'link' in field.lower():
                            link_col = field
                    
                    if not module_col or not link_col:
                        self._log(f"‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ 'Module' –∏ 'Link' –≤ CSV")
                        self._log(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {fieldnames}")
                        return []
                    
                    # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    f.seek(0)
                    reader = csv.DictReader(f, delimiter=delimiter)
                    
                    for row in reader:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∏–º–µ–Ω–∞—Ö –∫–æ–ª–æ–Ω–æ–∫
                        module = row.get('Module', '').strip() or row.get(' Module', '').strip()
                        link = row.get('Link', '').strip() or row.get(' Link', '').strip()
                        
                        if module and link:
                            modules.append({
                                'module': module,
                                'link': link,
                                'filename': self._sanitize_filename(module)
                            })
                
                self._log(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –º–æ–¥—É–ª–µ–π –≤ CSV: {len(modules)}")
                
                if modules:
                    self._log("\nüìã –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:")
                    for i, m in enumerate(modules, 1):
                        self._log(f"   {i:02d}. {m['module'][:50]}...")
                
                return modules
                
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV: {str(e)}")
            return []
    
    def convert_module(self, module: dict) -> bool:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        
        :param module: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª–µ
        :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        module_name = module['module']
        link = module['link']
        filename = module['filename']
        
        self._log(f"\n{'='*50}")
        self._log(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª—è: {module_name}")
        self._log(f"   –°—Å—ã–ª–∫–∞: {link[:100]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥—É–ª—è
        module_dir = self.output_dir / filename
        module_dir.mkdir(exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_file = module_dir / f"{filename}.mp4"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if output_file.exists() and output_file.stat().st_size > 0:
            self._log(f"‚úì –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {output_file.name}")
            self.skipped_modules.append(module_name)
            return True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è m3u8_converter.py
        cmd = [
            sys.executable,
            "m3u8_converter.py",
            link,
            "-o", str(output_file),
            "--filename", filename
        ]
        
        self._log(f"   –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_file}")
        self._log(f"   –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            start_time = time.time()
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=1800  # 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            elapsed_time = time.time() - start_time
            
            if result.returncode == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
                if output_file.exists() and output_file.stat().st_size > 0:
                    size_mb = output_file.stat().st_size / (1024 * 1024)
                    self._log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∑–∞ {elapsed_time:.1f}—Å")
                    self._log(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
                    info_file = module_dir / "module_info.txt"
                    with open(info_file, 'w', encoding='utf-8') as f:
                        f.write(f"Module: {module_name}\n")
                        f.write(f"Link: {link}\n")
                        f.write(f"Output: {output_file.name}\n")
                        f.write(f"Size: {size_mb:.2f} MB\n")
                        f.write(f"Processing time: {elapsed_time:.1f}s\n")
                        f.write(f"Processed at: {datetime.now()}\n")
                    
                    return True
                else:
                    self._log(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                    self.failed_modules.append(module_name)
                    return False
            else:
                self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–∫–æ–¥: {result.returncode})")
                if result.stderr:
                    error_lines = result.stderr.strip().split('\n')[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –æ—à–∏–±–∫–∏
                    for line in error_lines:
                        self._log(f"   {line}")
                self.failed_modules.append(module_name)
                return False
                
        except subprocess.TimeoutExpired:
            self._log(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç)")
            self.failed_modules.append(module_name)
            return False
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            self.failed_modules.append(module_name)
            return False
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_file = self.output_dir / "processing_report.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("–û–¢–ß–ï–¢ –û –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ï\n")
            f.write("="*60 + "\n\n")
            
            f.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now()}\n")
            f.write(f"CSV —Ñ–∞–π–ª: {self.csv_file}\n")
            f.write(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}\n\n")
            
            f.write("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n")
            f.write("-"*40 + "\n")
            f.write(f"–í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {self.total_modules}\n")
            f.write(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_modules}\n")
            f.write(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {len(self.skipped_modules)}\n")
            f.write(f"–û—à–∏–±–∫–∏: {len(self.failed_modules)}\n\n")
            
            if self.skipped_modules:
                f.write("–ü–†–û–ü–£–©–ï–ù–ù–´–ï –ú–û–î–£–õ–ò:\n")
                f.write("-"*40 + "\n")
                for module in self.skipped_modules:
                    f.write(f"  - {module}\n")
                f.write("\n")
            
            if self.failed_modules:
                f.write("–ú–û–î–£–õ–ò –° –û–®–ò–ë–ö–ê–ú–ò:\n")
                f.write("-"*40 + "\n")
                for module in self.failed_modules:
                    f.write(f"  - {module}\n")
                f.write("\n")
            
            f.write("–ü–û–î–†–û–ë–ù–´–ô –õ–û–ì:\n")
            f.write("-"*40 + "\n")
            for log_entry in self.log_messages:
                f.write(log_entry + "\n")
        
        self._log(f"\nüìã –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    
    def run(self, start_from: int = 0, max_modules: int = None):
        """
        –ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        :param start_from: –° –∫–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—á–∞—Ç—å (0-based index)
        :param max_modules: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        self._log("\nüöÄ –ó–ê–ü–£–°–ö –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
        
        # –ß–∏—Ç–∞–µ–º CSV
        modules = self.read_csv()
        
        if not modules:
            self._log("‚ùå –ù–µ—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return False
        
        self.total_modules = len(modules)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        end_at = len(modules)
        if max_modules:
            end_at = min(start_from + max_modules, len(modules))
        
        modules_to_process = modules[start_from:end_at]
        
        if start_from > 0 or max_modules:
            self._log(f"\nüìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª–µ–π —Å {start_from+1} –ø–æ {end_at} –∏–∑ {self.total_modules}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
        start_time = time.time()
        
        for i, module in enumerate(modules_to_process, start=start_from+1):
            self._log(f"\n{'='*50}")
            self._log(f"üì¶ –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{self.total_modules}")
            
            if self.convert_module(module):
                if module['module'] not in self.skipped_modules:
                    self.processed_modules += 1
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if i % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–æ–¥—É–ª–µ–π
                elapsed = time.time() - start_time
                avg_time = elapsed / i if i > 0 else 0
                remaining = (self.total_modules - i) * avg_time
                
                self._log(f"\n‚è±Ô∏è  –ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {self._format_time(elapsed)}")
                self._log(f"   –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ: {self._format_time(remaining)}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        
        self._log(f"\n{'='*60}")
        self._log("‚ú® –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        self._log(f"{'='*60}")
        self._log(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        self._log(f"   –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {self.total_modules}")
        self._log(f"   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {self.processed_modules}")
        self._log(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(self.skipped_modules)}")
        self._log(f"   –û—à–∏–±–∫–∏: {len(self.failed_modules)}")
        self._log(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {self._format_time(total_time)}")
        
        if self.processed_modules > 0:
            avg_time_per_module = total_time / self.processed_modules
            self._log(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –º–æ–¥—É–ª—å: {self._format_time(avg_time_per_module)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()
        
        self._log(f"\nüìÅ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        
        return len(self.failed_modules) == 0
    
    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if seconds < 60:
            return f"{seconds:.0f}—Å"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes:.0f}–º {secs:.0f}—Å"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours:.0f}—á {minutes:.0f}–º"


def main():
    parser = argparse.ArgumentParser(
        description="–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ m3u8 —Å—Å—ã–ª–æ–∫ –∏–∑ CSV —Ñ–∞–π–ª–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–§–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞:
  Module,Link
  "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è 1","https://example.com/video1.m3u8"
  "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è 2","https://example.com/video2.m3u8"

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–∑ playlist.csv
  python batch_processor.py
  
  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π CSV —Ñ–∞–π–ª
  python batch_processor.py -f my_playlist.csv
  
  # –£–∫–∞–∑–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  python batch_processor.py -o my_videos
  
  # –ù–∞—á–∞—Ç—å —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è (–ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
  python batch_processor.py --start-from 5
  
  # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ N –º–æ–¥—É–ª–µ–π
  python batch_processor.py --max 10
  
  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  python batch_processor.py --start-from 10 --max 5
        """
    )
    
    parser.add_argument(
        "-f", "--file",
        default="playlist.csv",
        help="–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: playlist.csv)"
    )
    
    parser.add_argument(
        "-o", "--output",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        default=None
    )
    
    parser.add_argument(
        "--start-from",
        type=int,
        default=0,
        help="–° –∫–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—á–∞—Ç—å (0-based, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)"
    )
    
    parser.add_argument(
        "--max",
        type=int,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = BatchProcessor(args.file, args.output)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        success = processor.run(
            start_from=args.start_from,
            max_modules=args.max
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if success else 1)
        
    except FileNotFoundError as e:
        print(f"‚ùå {e}")
        print("\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª playlist.csv –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("   –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:")
        print("   Module,Link")
        print('   "–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è","https://example.com/video.m3u8"')
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()