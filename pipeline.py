#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
–®–∞–≥ 3: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ m3u8 –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ü–µ–Ω
"""

import os
import sys
import argparse
import subprocess
import json
import shutil
from pathlib import Path
from datetime import datetime


class VideoPipeline:
    def __init__(self, input_path: str, output_dir: str = None, keep_temp: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline
        
        :param input_path: –ü—É—Ç—å –∫ m3u8 —Ñ–∞–π–ª—É
        :param output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        :param keep_temp: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã
        """
        self.input_path = Path(input_path)
        self.keep_temp = keep_temp
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if output_dir:
            self.output_dir = Path(output_dir)
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.output_dir = Path(f"pipeline_output_{timestamp}")
        
        self.output_dir.mkdir(exist_ok=True)
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        self.converted_video = None
        self.scenes_dir = None
        self.log_file = self.output_dir / "pipeline.log"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            'conversion': {
                'codec': 'copy',
                'quality': 23
            },
            'scene_detection': {
                'threshold': 5.0,
                'min_scene_len': 0.5,
                'detector': 'content',
                'extract_frames': True,
                'frame_type': 'middle',
                'extract_clips': False,
                'generate_html': True,
                'split_equal': None
            }
        }
        
        self._init_logging()
    
    def _init_logging(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log_messages = []
        self._log(f"Pipeline –∑–∞–ø—É—â–µ–Ω: {datetime.now()}")
        self._log(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {self.input_path}")
        self._log(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
    
    def _log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        self.log_messages.append(log_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + '\n')
    
    def update_config(self, config_dict: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for key, value in config_dict.items():
            if key in self.config and isinstance(value, dict):
                self.config[key].update(value)
            else:
                self.config[key] = value
    
    def step1_convert_m3u8(self) -> bool:
        """
        –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è m3u8 –≤ MP4
        """
        self._log("\n" + "="*50)
        self._log("–®–ê–ì 1: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø M3U8 ‚Üí MP4")
        self._log("="*50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not self.input_path.exists():
            self._log(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.input_path}")
            return False
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        self.converted_video = self.output_dir / f"{self.input_path.stem}_converted.mp4"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è m3u8_converter.py
        cmd = [
            sys.executable,
            "m3u8_converter.py",
            str(self.input_path),
            "-o", str(self.converted_video),
            "--codec", self.config['conversion']['codec']
        ]
        
        if self.config['conversion']['codec'] != 'copy':
            cmd.extend(["--quality", str(self.config['conversion']['quality'])])
        
        self._log(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä...")
        self._log(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=False
            )
            
            if result.returncode == 0:
                self._log(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {self.converted_video}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if self.converted_video.exists():
                    size_mb = self.converted_video.stat().st_size / (1024 * 1024)
                    self._log(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")
                    return True
                else:
                    self._log(f"‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    return False
            else:
                self._log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
                if result.stderr:
                    self._log(f"   {result.stderr}")
                return False
                
        except FileNotFoundError:
            self._log("‚ùå –°–∫—Ä–∏–ø—Ç m3u8_converter.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            self._log("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
            return False
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def step2_detect_scenes(self) -> bool:
        """
        –®–∞–≥ 2: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ü–µ–Ω
        """
        self._log("\n" + "="*50)
        self._log("–®–ê–ì 2: –û–ë–ù–ê–†–£–ñ–ï–ù–ò–ï –ò –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–¶–ï–ù")
        self._log("="*50)
        
        if not self.converted_video or not self.converted_video.exists():
            self._log("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å—Ü–µ–Ω
        self.scenes_dir = self.output_dir / "scenes"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è scene_detector.py
        cmd = [
            sys.executable,
            "scene_detector.py",
            str(self.converted_video),
            "-o", str(self.scenes_dir),
            "--threshold", str(self.config['scene_detection']['threshold']),
            "--min-scene-len", str(self.config['scene_detection']['min_scene_len']),
            "--detector", self.config['scene_detection']['detector']
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if self.config['scene_detection'].get('split_equal'):
            cmd.extend(["--split-equal", str(self.config['scene_detection']['split_equal'])])
        
        if self.config['scene_detection']['extract_frames']:
            cmd.append("--extract-frames")
            cmd.extend(["--frame-type", self.config['scene_detection']['frame_type']])
        
        if self.config['scene_detection']['extract_clips']:
            cmd.append("--extract-clips")
        
        if self.config['scene_detection']['generate_html']:
            cmd.append("--html")
        
        self._log(f"–ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å—Ü–µ–Ω...")
        self._log(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(cmd)}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=False
            )
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.stdout:
                for line in result.stdout.strip().split('\n'):
                    self._log(f"   {line}")
            
            if result.returncode == 0:
                self._log(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._check_results()
                return True
            else:
                self._log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ü–µ–Ω")
                if result.stderr:
                    self._log(f"   {result.stderr}")
                return False
                
        except FileNotFoundError:
            self._log("‚ùå –°–∫—Ä–∏–ø—Ç scene_detector.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
            self._log("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
            return False
        except Exception as e:
            self._log(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def _check_results(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.scenes_dir or not self.scenes_dir.exists():
            return
        
        # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_file = self.scenes_dir / "scenes_metadata.json"
        if metadata_file.exists():
            with open(metadata_file, 'r') as f:
                metadata = json.load(f)
                total_scenes = metadata.get('total_scenes', 0)
                self._log(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                self._log(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ü–µ–Ω: {total_scenes}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        frames_dir = self.scenes_dir / "frames"
        clips_dir = self.scenes_dir / "clips"
        
        if frames_dir.exists():
            frame_count = len(list(frames_dir.glob("*.jpg")))
            self._log(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {frame_count}")
        
        if clips_dir.exists():
            clip_count = len(list(clips_dir.glob("*.mp4")))
            self._log(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–ª–∏–ø–æ–≤: {clip_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML –æ—Ç—á–µ—Ç
        html_file = self.scenes_dir / "summary.html"
        if html_file.exists():
            self._log(f"   üìÑ HTML –æ—Ç—á–µ—Ç: {html_file}")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.keep_temp and self.converted_video and self.converted_video.exists():
            self._log("\nüßπ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...")
            try:
                os.remove(self.converted_video)
                self._log(f"   –£–¥–∞–ª–µ–Ω: {self.converted_video.name}")
            except Exception as e:
                self._log(f"   –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_file = self.output_dir / "pipeline_report.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("–û–¢–ß–ï–¢ –û –í–´–ü–û–õ–ù–ï–ù–ò–ò PIPELINE\n")
            f.write("="*60 + "\n\n")
            
            f.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {datetime.now()}\n")
            f.write(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {self.input_path}\n")
            f.write(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}\n\n")
            
            f.write("–ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:\n")
            f.write(json.dumps(self.config, indent=2, ensure_ascii=False))
            f.write("\n\n")
            
            f.write("–õ–û–ì –í–´–ü–û–õ–ù–ï–ù–ò–Ø:\n")
            f.write("-"*60 + "\n")
            for log_entry in self.log_messages:
                f.write(log_entry + "\n")
        
        self._log(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")
    
    def run(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ pipeline
        """
        self._log("\nüöÄ –ó–ê–ü–£–°–ö PIPELINE")
        
        # –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        if not self.step1_convert_m3u8():
            self._log("\n‚ùå Pipeline –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ —à–∞–≥–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
            return False
        
        # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω
        if not self.step2_detect_scenes():
            self._log("\n‚ùå Pipeline –ø—Ä–µ—Ä–≤–∞–Ω –Ω–∞ —à–∞–≥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω")
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if not self.keep_temp:
            self.cleanup()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self.generate_final_report()
        
        self._log("\n" + "="*50)
        self._log("‚ú® PIPELINE –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
        self._log(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {self.output_dir}")
        self._log("="*50)
        
        return True


def main():
    parser = argparse.ArgumentParser(
        description="Pipeline –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ m3u8 –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ü–µ–Ω",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—É—Å–∫
  python pipeline.py video.m3u8
  
  # –° –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –ø–æ—Ä–æ–≥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏
  python pipeline.py video.m3u8 --threshold 10
  
  # –†–∞–∑–±–∏—Ç—å –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–æ –¥–µ—Ç–µ–∫—Ü–∏–∏
  python pipeline.py video.m3u8 --split-equal 20
  
  # –° –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ–º –∫–ª–∏–ø–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  python pipeline.py video.m3u8 --extract-clips --keep-temp
  
  # –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
  python pipeline.py video.m3u8 \\
    --output results \\
    --threshold 5 \\
    --extract-frames \\
    --extract-clips \\
    --frame-type best
        """
    )
    
    parser.add_argument(
        "input",
        help="–ü—É—Ç—å –∫ m3u8 —Ñ–∞–π–ª—É"
    )
    
    parser.add_argument(
        "-o", "--output",
        help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
        default=None
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    parser.add_argument(
        "--codec",
        choices=['copy', 'libx264', 'libx265'],
        default='copy',
        help="–í–∏–¥–µ–æ –∫–æ–¥–µ–∫ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: copy)"
    )
    
    parser.add_argument(
        "--quality",
        type=int,
        default=23,
        help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ (0-51, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 23)"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ü–µ–Ω
    parser.add_argument(
        "--threshold",
        type=float,
        default=5.0,
        help="–ü–æ—Ä–æ–≥ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å—Ü–µ–Ω (1-100, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5)"
    )
    
    parser.add_argument(
        "--min-scene-len",
        type=float,
        default=0.5,
        help="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å—Ü–µ–Ω—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.5)"
    )
    
    parser.add_argument(
        "--detector",
        choices=['content', 'adaptive'],
        default='content',
        help="–¢–∏–ø –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ —Å—Ü–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: content)"
    )
    
    parser.add_argument(
        "--split-equal",
        type=int,
        metavar="N",
        help="–†–∞–∑–±–∏—Ç—å –Ω–∞ N —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π –≤–º–µ—Å—Ç–æ –¥–µ—Ç–µ–∫—Ü–∏–∏"
    )
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    parser.add_argument(
        "--extract-frames",
        action="store_true",
        default=True,
        help="–ò–∑–≤–ª–µ–∫–∞—Ç—å –∫–∞–¥—Ä—ã –∏–∑ —Å—Ü–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –¥–∞)"
    )
    
    parser.add_argument(
        "--no-extract-frames",
        dest="extract_frames",
        action="store_false",
        help="–ù–µ –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–∞–¥—Ä—ã"
    )
    
    parser.add_argument(
        "--frame-type",
        choices=['first', 'middle', 'last', 'best'],
        default='middle',
        help="–¢–∏–ø –∫–∞–¥—Ä–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: middle)"
    )
    
    parser.add_argument(
        "--extract-clips",
        action="store_true",
        help="–ò–∑–≤–ª–µ–∫–∞—Ç—å –≤–∏–¥–µ–æ –∫–ª–∏–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ü–µ–Ω—ã"
    )
    
    parser.add_argument(
        "--no-html",
        dest="generate_html",
        action="store_false",
        default=True,
        help="–ù–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å HTML –æ—Ç—á–µ—Ç"
    )
    
    parser.add_argument(
        "--keep-temp",
        action="store_true",
        help="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ)"
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º pipeline
    pipeline = VideoPipeline(
        args.input,
        args.output,
        args.keep_temp
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = {
        'conversion': {
            'codec': args.codec,
            'quality': args.quality
        },
        'scene_detection': {
            'threshold': args.threshold,
            'min_scene_len': args.min_scene_len,
            'detector': args.detector,
            'extract_frames': args.extract_frames,
            'frame_type': args.frame_type,
            'extract_clips': args.extract_clips,
            'generate_html': args.generate_html,
            'split_equal': args.split_equal
        }
    }
    pipeline.update_config(config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
    success = pipeline.run()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()