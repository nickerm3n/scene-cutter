#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /api/course
"""

import requests
import json

def test_course_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞"""
    
    # URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
    base_url = "http://localhost:8005"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
    test_course_data = {
        "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –ø–æ Python",
        "url": "https://example.com/course/python",
        "extractedAt": "2024-01-15T10:30:00Z",
        "sections": [
            {
                "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python",
                "items": [
                    {
                        "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ Python",
                        "videoUrl": "https://example.com/video1.mp4",
                        "transcript": "Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...",
                        "dataPurpose": "item-1"
                    },
                    {
                        "title": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python",
                        "videoUrl": "https://example.com/video2.mp4",
                        "transcript": "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python —Å–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞...",
                        "dataPurpose": "item-2"
                    }
                ]
            },
            {
                "title": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "items": [
                    {
                        "title": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö",
                        "videoUrl": "https://example.com/video3.mp4",
                        "transcript": "–í Python –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö...",
                        "dataPurpose": "item-3"
                    }
                ]
            }
        ]
    }
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/course...")
        print(f"üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ {base_url}/api/course")
        print(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {len(json.dumps(test_course_data))} –±–∞–π—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            f"{base_url}/api/course",
            json=test_course_data,
            headers={"Content-Type": "application/json"},
            timeout=10
        )
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: HTTP {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
            print(f"üìä –°–µ–∫—Ü–∏–π: {result.get('sections_count', 0)}")
            print(f"üìù –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {result.get('total_items', 0)}")
            print(f"üïê –ü–æ–ª—É—á–µ–Ω–æ –≤: {result.get('received_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8005")
    except requests.exceptions.Timeout:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_course_endpoint()
