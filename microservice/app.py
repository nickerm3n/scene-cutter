from flask import Flask, jsonify, request
import requests
import json
from datetime import datetime

app = Flask(__name__)

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'message': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!'
    })

@app.route('/api/data', methods=['GET'])
def get_data():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å"""
    try:
        # –ü—Ä–∏–º–µ—Ä GET –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
        response = requests.get('https://jsonplaceholder.typicode.com/posts/1', timeout=5)
        response.raise_for_status()
        
        return jsonify({
            'success': True,
            'data': response.json(),
            'source': 'external_api'
        })
    except requests.RequestException as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
        }), 500

@app.route('/api/course', methods=['POST'])
def receive_course():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
        course_data = request.get_json()
        
        if not course_data:
            return jsonify({
                'success': False,
                'error': '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã'
            }), 400
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        print("\n" + "="*80)
        print(f"üìö –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ö–£–†–°–ê - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*80)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
        print(f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üîó URL –∫—É—Ä—Å–∞: {course_data.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üìÖ –î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {course_data.get('extractedAt', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π: {len(course_data.get('sections', []))}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        total_items = sum(len(section.get('items', [])) for section in course_data.get('sections', []))
        print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}")
        
        print("\n" + "-"*80)
        print("üìã –°–¢–†–£–ö–¢–£–†–ê –ö–£–†–°–ê:")
        print("-"*80)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
        for i, section in enumerate(course_data.get('sections', []), 1):
            print(f"\nüìñ –°–µ–∫—Ü–∏—è {i}: {section.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏: {len(section.get('items', []))}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–µ–∫—Ü–∏–∏
            for j, item in enumerate(section.get('items', []), 1):
                print(f"   üìù –≠–ª–µ–º–µ–Ω—Ç {j}: {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                if item.get('videoUrl'):
                    print(f"      üé• –í–∏–¥–µ–æ: {item.get('videoUrl')}")
                if item.get('transcript'):
                    transcript_length = len(item.get('transcript', ''))
                    print(f"      üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {transcript_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\n" + "="*80)
        print("‚úÖ –î–ê–ù–ù–´–ï –ö–£–†–°–ê –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù–´")
        print("="*80 + "\n")
        
        return jsonify({
            'success': True,
            'message': f'–ö—É—Ä—Å "{course_data.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")}" —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω',
            'sections_count': len(course_data.get('sections', [])),
            'total_items': total_items,
            'received_at': datetime.now().isoformat()
        })
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ö–£–†–°–ê: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞'
        }), 500

@app.route('/', methods=['GET'])
def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({
        'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å Course Parser!',
        'endpoints': {
            'health': '/health',
            'data': '/api/data',
            'course': '/api/course (POST)',
            'root': '/'
        }
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8005, debug=True)
