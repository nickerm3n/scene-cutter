from flask import Flask, jsonify, request
import requests
import json
import subprocess
import os
import sys
from datetime import datetime
from pathlib import Path

app = Flask(__name__)

# –ü—É—Ç—å –∫ –ø–∞–π–ø–ª–∞–π–Ω—É
PIPELINE_DIR = Path(__file__).parent.parent / "video-pipeline"
PIPELINE_SCRIPT = PIPELINE_DIR / "pipeline_api.py"

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    return jsonify({
        'status': 'healthy',
        'message': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç!'
    })

@app.route('/api/data', methods=['GET'])
def get_data():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ GET –∑–∞–ø—Ä–æ—Å"""
    try:
        # –ü—Ä–∏–º–µ—Ä GET –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–Ω–µ—à–Ω–µ–º—É API
        response = requests.get('https://jsonplaceholder.typicode.com/posts/1', timeout=5)
        response.raise_for_status()
        
        return jsonify({
            'success': True,
            'data': response.json(),
            'source': 'external_api'
        })
    except requests.RequestException as e:
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
        }), 500

@app.route('/api/course', methods=['POST'])
def receive_course():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ POST –∑–∞–ø—Ä–æ—Å–∞
        course_data = request.get_json()
        
        if not course_data:
            return jsonify({
                'success': False,
                'error': '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã'
            }), 400
        
        # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        print("\n" + "="*80)
        print(f"üìö –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ö–£–†–°–ê - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*80)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ
        print(f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course_data.get('title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üîó URL –∫—É—Ä—Å–∞: {course_data.get('url', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üìÖ –î–∞—Ç–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {course_data.get('extractedAt', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ü–∏–π: {len(course_data.get('sections', []))}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        total_items = sum(len(section.get('items', [])) for section in course_data.get('sections', []))
        print(f"üìù –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {total_items}")
        
        print("\n" + "-"*80)
        print("üìã –°–¢–†–£–ö–¢–£–†–ê –ö–£–†–°–ê:")
        print("-"*80)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
        for i, section in enumerate(course_data.get('sections', []), 1):
            print(f"\nüìñ –°–µ–∫—Ü–∏—è {i}: {section.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            print(f"   üìä –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–µ–∫—Ü–∏–∏: {len(section.get('items', []))}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–µ–∫—Ü–∏–∏
            for j, item in enumerate(section.get('items', []), 1):
                print(f"   üìù –≠–ª–µ–º–µ–Ω—Ç {j}: {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                if item.get('videoUrl'):
                    print(f"      üé• –í–∏–¥–µ–æ: {item.get('videoUrl')}")
                if item.get('transcript'):
                    transcript_length = len(item.get('transcript', ''))
                    print(f"      üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: {transcript_length} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\n" + "="*80)
        print("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û")
        print("="*80)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
        if not PIPELINE_SCRIPT.exists():
            print(f"‚ùå –ü–∞–π–ø–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {PIPELINE_SCRIPT}")
            return jsonify({
                'success': False,
                'error': f'–ü–∞–π–ø–ª–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {PIPELINE_SCRIPT}',
                'message': '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –ø–∞–π–ø–ª–∞–π–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            }), 500
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        pipeline_config = request.get_json().get('pipeline_config', {})
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_config = {
            'output_dir': f"course_output_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'threshold': 5.0,
            'min_scene_len': 0.5,
            'extract_clips': False,
            'keep_temp': False,
            'max_modules': None  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏
        }
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        pipeline_config = {**default_config, **pipeline_config}
        
        print(f"üìÅ –ü–∞–π–ø–ª–∞–π–Ω: {PIPELINE_SCRIPT}")
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {pipeline_config['output_dir']}")
        print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏: threshold={pipeline_config['threshold']}, extract_clips={pipeline_config['extract_clips']}")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞
        import tempfile
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False, encoding='utf-8') as f:
            json.dump(course_data, f, ensure_ascii=False, indent=2)
            temp_file_path = f.name
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞
            cmd = [
                sys.executable,
                str(PIPELINE_SCRIPT),
                "--data-file", temp_file_path
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–∞–π–ø–ª–∞–π–Ω–∞
            if pipeline_config.get('output_dir'):
                cmd.extend(["-o", pipeline_config['output_dir']])
            
            if pipeline_config.get('threshold'):
                cmd.extend(["--threshold", str(pipeline_config['threshold'])])
            
            if pipeline_config.get('min_scene_len'):
                cmd.extend(["--min-scene-len", str(pipeline_config['min_scene_len'])])
            
            if pipeline_config.get('extract_clips'):
                cmd.append("--extract-clips")
            
            if pipeline_config.get('keep_temp'):
                cmd.append("--keep-temp")
            
            if pipeline_config.get('max_modules'):
                cmd.extend(["--max", str(pipeline_config['max_modules'])])
            
            print(f"üé¨ –ö–æ–º–∞–Ω–¥–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {' '.join(cmd)}")
            print("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            try:
                result = subprocess.run(
                    cmd,
                    text=True,
                    cwd=str(PIPELINE_DIR),
                    timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
                )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.unlink(temp_file_path)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if result.returncode == 0:
                    print("‚úÖ –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –≤—ã–≤–æ–¥–∞
                    output_lines = result.stdout.strip().split('\n')
                    pipeline_result = None
                    
                    for line in output_lines:
                        if line.startswith('üìã Pipeline Result:'):
                            # –ò—â–µ–º JSON –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å—Ç—Ä–æ–∫–∞—Ö
                            for next_line in output_lines[output_lines.index(line)+1:]:
                                if next_line.strip().startswith('{'):
                                    try:
                                        pipeline_result = json.loads(next_line.strip())
                                        break
                                    except json.JSONDecodeError:
                                        continue
                            break
                    
                    return jsonify({
                        'success': True,
                        'message': f'–ö—É—Ä—Å "{course_data.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")}" —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
                        'sections_count': len(course_data.get('sections', [])),
                        'total_items': total_items,
                        'pipeline_status': 'completed',
                        'pipeline_result': pipeline_result,
                        'output_dir': pipeline_config['output_dir'],
                        'processed_at': datetime.now().isoformat()
                    })
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–∫–æ–¥: {result.returncode})")
                    
                    return jsonify({
                        'success': False,
                        'error': f'–û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ (–∫–æ–¥: {result.returncode})',
                        'message': '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π',
                        'sections_count': len(course_data.get('sections', [])),
                        'total_items': total_items,
                        'pipeline_status': 'failed',
                        'output_dir': pipeline_config['output_dir'],
                        'processed_at': datetime.now().isoformat()
                    }), 500
                    
            except subprocess.TimeoutExpired:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_file_path):
                    os.unlink(temp_file_path)
                
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)")
                return jsonify({
                    'success': False,
                    'error': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)',
                    'message': '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏',
                    'sections_count': len(course_data.get('sections', [])),
                    'total_items': total_items,
                    'pipeline_status': 'timeout',
                    'output_dir': pipeline_config['output_dir'],
                    'processed_at': datetime.now().isoformat()
                }), 500
            
        except Exception as e:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {str(e)}")
            return jsonify({
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞: {str(e)}',
                'message': '–î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ'
            }), 500
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ö–£–†–°–ê: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞'
        }), 500



@app.route('/api/status', methods=['GET'])
def get_status():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    return jsonify({
        'status': 'running',
        'message': '–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç',
        'timestamp': datetime.now().isoformat(),
        'note': '–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞'
    })

@app.route('/', methods=['GET'])
def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return jsonify({
        'message': '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å Course Parser!',
        'version': '2.0',
        'features': [
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞',
            '–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø–∞–π–ø–ª–∞–π–Ω —Å –≤—ã–≤–æ–¥–æ–º –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
            '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏',
            '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤'
        ],
        'endpoints': {
            'health': '/health',
            'status': '/api/status',
            'course': '/api/course (POST) - –æ—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ',
            'root': '/'
        },
        'usage': {
            'course_endpoint': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞',
            'example': {
                'course_data': {'title': '...', 'sections': [...]},
                'pipeline_config': {'threshold': 5.0, 'extract_clips': False}
            }
        }
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8005, debug=True)
