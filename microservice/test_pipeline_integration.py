#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ —Å –ø–∞–π–ø–ª–∞–π–Ω–æ–º
"""

import requests
import json
import time

# URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
BASE_URL = "http://localhost:8005"

def test_health():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
    
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_course_reception():
    """–¢–µ—Å—Ç –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
    course_data = {
        "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –ø–æ Python",
        "url": "https://example.com/course/python",
        "extractedAt": "2024-01-15T15:30:45.123Z",
        "sections": [
            {
                "title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ Python",
                "items": [
                    {
                        "title": "–ß—Ç–æ —Ç–∞–∫–æ–µ Python",
                        "videoUrl": "https://example.com/video1.m3u8",
                        "transcript": "Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è...",
                        "dataPurpose": "item-1"
                    },
                    {
                        "title": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python",
                        "videoUrl": "https://example.com/video2.m3u8",
                        "transcript": "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Python —Å–∫–∞—á–∞–π—Ç–µ –µ–≥–æ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å–∞–π—Ç–∞...",
                        "dataPurpose": "item-2"
                    }
                ]
            },
            {
                "title": "–û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
                "items": [
                    {
                        "title": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö",
                        "videoUrl": "https://example.com/video3.m3u8",
                        "transcript": "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Python –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞...",
                        "dataPurpose": "item-3"
                    }
                ]
            }
        ]
    }
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    pipeline_config = {
        "threshold": 5.0,
        "min_scene_len": 0.5,
        "extract_clips": False,
        "keep_temp": False,
        "max_modules": 1  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
    }
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    request_data = {
        "course_data": course_data,
        "pipeline_config": pipeline_config
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/course",
            json=request_data,
            headers={'Content-Type': 'application/json'},
            timeout=30  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            print(f"   –°–µ–∫—Ü–∏–π: {result.get('sections_count')}")
            print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤: {result.get('total_items')}")
            print(f"   –°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞: {result.get('pipeline_status')}")
            print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.get('output_dir')}")
            print(f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {result.get('note')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_pipeline_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–π–ø–ª–∞–π–Ω–æ–º"""
    print("\nüé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–∞–π–ø–ª–∞–π–Ω–æ–º...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ (—Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ m3u8 —Å—Å—ã–ª–∫–∞–º–∏ –∏–∑ playlist.csv)
    course_data = {
        "title": "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏",
        "url": "https://example.com/course/test",
        "extractedAt": "2024-01-15T15:30:45.123Z",
        "sections": [
            {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–∫—Ü–∏—è",
                "items": [
                    {
                        "title": "Creating a Free Gemini AI API Token",
                        "videoUrl": "https://epam.udemy.com/assets/65239373/files/2025-05-19_13-24-39-e9b0432abed617654f061458eba3c9a6/2/aa00ec69985284ee7aa555e8a3d2c689505c.m3u8?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXRoIjoiMjAyNS0wNS0xOV8xMy0yNC0zOS1lOWIwNDMyYWJlZDYxNzY1NGYwNjE0NThlYmEzYzlhNi8yLyIsImV4cCI6MTc1NTI4OTIzNH0.R0JMG9VJNNioGiDic0xrOa86hERGpmdJgemCBuC4SuM&provider=cloudfront&v=1",
                        "transcript": "I'm super excited to discuss this piece of the course with you...",
                        "dataPurpose": "item-1"
                    }
                ]
            }
        ]
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline_config = {
        "output_dir": "test_output",
        "threshold": 5.0,
        "min_scene_len": 0.5,
        "extract_clips": False,
        "keep_temp": True,
        "max_modules": 1  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
    }
    
    request_data = {
        "course_data": course_data,
        "pipeline_config": pipeline_config
    }
    
    try:
        print("üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
        response = requests.post(
            f"{BASE_URL}/api/process-video",
            json=request_data,
            headers={'Content-Type': 'application/json'},
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            print(f"   –£—Å–ø–µ—Ö: {result.get('success')}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            
            if result.get('pipeline_result'):
                pipeline_result = result['pipeline_result']
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞–π–ø–ª–∞–π–Ω–∞:")
                print(f"     - –í—Å–µ–≥–æ –º–æ–¥—É–ª–µ–π: {pipeline_result.get('total_modules')}")
                print(f"     - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {pipeline_result.get('processed_modules')}")
                print(f"     - –û—à–∏–±–æ–∫: {len(pipeline_result.get('failed_modules', []))}")
                print(f"     - –í—Ä–µ–º—è: {pipeline_result.get('total_time', 0):.1f}—Å")
                print(f"     - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {pipeline_result.get('output_dir')}")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_sync_pipeline():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
    course_data = {
        "title": "–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç",
        "url": "https://example.com/course/sync",
        "extractedAt": "2024-01-15T15:30:45.123Z",
        "sections": [
            {
                "title": "–¢–µ—Å—Ç–æ–≤–∞—è —Å–µ–∫—Ü–∏—è",
                "items": [
                    {
                        "title": "–¢–µ—Å—Ç–æ–≤—ã–π –º–æ–¥—É–ª—å",
                        "videoUrl": "https://example.com/test.m3u8",
                        "transcript": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç...",
                        "dataPurpose": "item-1"
                    }
                ]
            }
        ]
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/process-video-sync",
            json={"course_data": course_data},
            headers={'Content-Type': 'application/json'},
            timeout=60  # 1 –º–∏–Ω—É—Ç–∞ —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   –£—Å–ø–µ—Ö: {result.get('success')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê –° –ü–ê–ô–ü–õ–ê–ô–ù–û–ú")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω
    if not test_health():
        print("\n‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å:")
        print("   cd microservice")
        print("   python app.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞
    if not test_course_reception():
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–µ–º–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω
    if not test_sync_pipeline():
        print("\n‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...")
    user_input = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): ")
    
    if user_input.lower() == 'y':
        if not test_pipeline_integration():
            print("\n‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞")
            return
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main()
