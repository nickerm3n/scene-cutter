#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ m3u8 —Ñ–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ–æ
–®–∞–≥ 1: –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path
from urllib.parse import urlparse


class M3U8Converter:
    def __init__(self, input_path, output_path=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        
        :param input_path: –ü—É—Ç—å –∫ m3u8 —Ñ–∞–π–ª—É –∏–ª–∏ URL
        :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        """
        self.input_path = input_path
        self.output_path = output_path or self._generate_output_path()
        
    def _generate_output_path(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if self._is_url(self.input_path):
            # –ï—Å–ª–∏ —ç—Ç–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
            parsed = urlparse(self.input_path)
            filename = Path(parsed.path).stem or "output"
        else:
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            filename = Path(self.input_path).stem
        
        return f"{filename}_converted.mp4"
    
    def _is_url(self, path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å URL"""
        try:
            result = urlparse(path)
            return all([result.scheme, result.netloc])
        except:
            return False
    
    def check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg"""
        try:
            subprocess.run(["ffmpeg", "-version"], 
                         capture_output=True, 
                         check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            print("   Ubuntu/Debian: sudo apt-get install ffmpeg")
            print("   MacOS: brew install ffmpeg")
            print("   Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/download.html")
            return False
    
    def convert(self, codec='copy', quality=None):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è m3u8 –≤ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        
        :param codec: –í–∏–¥–µ–æ –∫–æ–¥–µ–∫ ('copy' –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
        :param quality: –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–¥–ª—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '23' –¥–ª—è CRF)
        """
        if not self.check_ffmpeg():
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É ffmpeg —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è m3u8
        cmd = [
            "ffmpeg",
            "-protocol_whitelist", "file,crypto,data,https,tcp,tls",
            "-allowed_extensions", "ALL",
            "-i", self.input_path,
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        if codec == 'copy':
            cmd.extend([
                "-c", "copy",
                "-bsf:a", "aac_adtstoasc"  # –í–∞–∂–Ω–æ –¥–ª—è AAC –∞—É–¥–∏–æ –≤ MP4
            ])
        else:
            cmd.extend([
                "-c:v", codec,
                "-c:a", "aac",  # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ AAC –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "-bsf:a", "aac_adtstoasc"
            ])
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if quality:
                cmd.extend(["-crf", str(quality)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        cmd.extend(["-y", self.output_path])
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {self.input_path}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {self.output_path}")
        print(f"   –ö–æ–¥–µ–∫: {codec}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True
            )
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for line in process.stderr:
                if "time=" in line:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    time_str = line.split("time=")[1].split()[0]
                    print(f"\r‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞: {time_str}", end="", flush=True)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            process.wait()
            
            if process.returncode == 0:
                print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.output_path}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
                self.get_video_info()
                return True
            else:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                return False
                
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            process.terminate()
            return False
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return False
    
    def get_video_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ"""
        if not os.path.exists(self.output_path):
            return
        
        cmd = [
            "ffprobe",
            "-v", "quiet",
            "-print_format", "json",
            "-show_format",
            "-show_streams",
            self.output_path
        ]
        
        try:
            import json
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                info = json.loads(result.stdout)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                duration = float(info.get('format', {}).get('duration', 0))
                size_mb = os.path.getsize(self.output_path) / (1024 * 1024)
                
                print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ:")
                print(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self._format_duration(duration)}")
                print(f"   –†–∞–∑–º–µ—Ä: {size_mb:.2f} MB")
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫–µ
                for stream in info.get('streams', []):
                    if stream['codec_type'] == 'video':
                        print(f"   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {stream['width']}x{stream['height']}")
                        print(f"   FPS: {eval(stream.get('r_frame_rate', '0/1')):.2f}")
                        break
        except:
            pass
    
    def _format_duration(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        
        if hours > 0:
            return f"{hours}—á {minutes}–º {secs}—Å"
        elif minutes > 0:
            return f"{minutes}–º {secs}—Å"
        else:
            return f"{secs}—Å"


def main():
    parser = argparse.ArgumentParser(
        description="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä M3U8 —Ñ–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ–æ",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python m3u8_converter.py video.m3u8
  
  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å URL
  python m3u8_converter.py https://example.com/stream.m3u8
  
  # –£–∫–∞–∑–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python m3u8_converter.py input.m3u8 -o output.mp4
  
  # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—á–µ—Å—Ç–≤–∞
  python m3u8_converter.py input.m3u8 --codec libx264 --quality 23
        """
    )
    
    parser.add_argument(
        "input",
        help="–ü—É—Ç—å –∫ m3u8 —Ñ–∞–π–ª—É –∏–ª–∏ URL"
    )
    
    parser.add_argument(
        "-o", "--output",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: input_converted.mp4)",
        default=None
    )
    
    parser.add_argument(
        "--codec",
        help="–í–∏–¥–µ–æ –∫–æ–¥–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: copy - –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)",
        default="copy",
        choices=["copy", "libx264", "libx265"]
    )
    
    parser.add_argument(
        "--quality",
        help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ CRF (0-51, –º–µ–Ω—å—à–µ = –ª—É—á—à–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 23)",
        type=int,
        default=23
    )
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
    converter = M3U8Converter(args.input, args.output)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    success = converter.convert(codec=args.codec, quality=args.quality)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()