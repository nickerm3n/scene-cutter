#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ m3u8 —Ñ–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ–æ
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å batch processor
"""

import os
import sys
import subprocess
import argparse
from pathlib import Path
from urllib.parse import urlparse


class M3U8Converter:
    def __init__(self, input_path, output_path=None, filename=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        
        :param input_path: –ü—É—Ç—å –∫ m3u8 —Ñ–∞–π–ª—É –∏–ª–∏ URL
        :param output_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        :param filename: –ò–º—è —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –æ—Ç batch processor)
        """
        self.input_path = input_path
        self.filename = filename
        
        if output_path:
            self.output_path = Path(output_path)
        else:
            self.output_path = Path(self._generate_output_path())
        
    def _generate_output_path(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if self.filename:
            # –ï—Å–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Ç batch processor
            return f"{self.filename}.mp4"
        elif self._is_url(self.input_path):
            # –ï—Å–ª–∏ —ç—Ç–æ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
            parsed = urlparse(self.input_path)
            filename = Path(parsed.path).stem or "output"
        else:
            # –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            filename = Path(self.input_path).stem
        
        return f"{filename}_converted.mp4"
    
    def _is_url(self, path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å URL"""
        try:
            result = urlparse(path)
            return all([result.scheme, result.netloc])
        except:
            return False
    
    def check_ffmpeg(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è ffmpeg"""
        try:
            subprocess.run(["ffmpeg", "-version"], 
                         capture_output=True, 
                         check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            print("   Ubuntu/Debian: sudo apt-get install ffmpeg")
            print("   MacOS: brew install ffmpeg")
            print("   Windows: —Å–∫–∞—á–∞–π—Ç–µ —Å https://ffmpeg.org/download.html")
            return False
    
    def convert(self, codec='copy', quality=None):
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è m3u8 –≤ –≤–∏–¥–µ–æ —Ñ–∞–π–ª
        
        :param codec: –í–∏–¥–µ–æ –∫–æ–¥–µ–∫ ('copy' –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
        :param quality: –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ (–¥–ª—è –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä '23' –¥–ª—è CRF)
        """
        if not self.check_ffmpeg():
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É ffmpeg —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è m3u8
        cmd = [
            "ffmpeg",
            "-protocol_whitelist", "file,crypto,data,https,tcp,tls",
            "-allowed_extensions", "ALL",
            "-i", self.input_path,
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        if codec == 'copy':
            cmd.extend([
                "-c", "copy",
                "-bsf:a", "aac_adtstoasc"  # –í–∞–∂–Ω–æ –¥–ª—è AAC –∞—É–¥–∏–æ –≤ MP4
            ])
        else:
            cmd.extend([
                "-c:v", codec,
                "-c:a", "aac",  # –ü–µ—Ä–µ–∫–æ–¥–∏—Ä—É–µ–º –∞—É–¥–∏–æ –≤ AAC –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                "-bsf:a", "aac_adtstoasc"
            ])
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if quality:
                cmd.extend(["-crf", str(quality)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        cmd.extend(["-y", str(self.output_path)])
        
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {self.input_path}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {self.output_path}")
        print(f"   –ö–æ–¥–µ–∫: {codec}")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º ffmpeg
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                check=True
            )
            
            print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if self.output_path.exists():
                size_mb = self.output_path.stat().st_size / (1024 * 1024)
                print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB")
            
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
            if e.stderr:
                print(f"   {e.stderr}")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return False


def main():
    parser = argparse.ArgumentParser(
        description="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è m3u8 —Ñ–∞–π–ª–æ–≤ –≤ MP4",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è URL
  python m3u8_converter.py "https://example.com/video.m3u8"
  
  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python m3u8_converter.py video.m3u8
  
  # –° —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  python m3u8_converter.py video.m3u8 -o output.mp4
  
  # –° –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –æ—Ç batch processor
  python m3u8_converter.py video.m3u8 --filename "my_video"
  
  # –° –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  python m3u8_converter.py video.m3u8 --codec libx264 --quality 23
        """
    )
    
    parser.add_argument(
        "input",
        help="–ü—É—Ç—å –∫ m3u8 —Ñ–∞–π–ª—É –∏–ª–∏ URL"
    )
    
    parser.add_argument(
        "-o", "--output",
        help="–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
    )
    
    parser.add_argument(
        "--filename",
        help="–ò–º—è —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω --output)"
    )
    
    parser.add_argument(
        "--codec",
        choices=['copy', 'libx264', 'libx265'],
        default='copy',
        help="–í–∏–¥–µ–æ –∫–æ–¥–µ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: copy)"
    )
    
    parser.add_argument(
        "--quality",
        type=int,
        help="–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –ø—Ä–∏ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ (0-51)"
    )
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        converter = M3U8Converter(
            args.input,
            args.output,
            args.filename
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        success = converter.convert(args.codec, args.quality)
        
        if success:
            print(f"\nüìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {converter.output_path}")
            sys.exit(0)
        else:
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()