#!/usr/bin/env python3
"""
API –≤–µ—Ä—Å–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∫—É—Ä—Å–∞
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç JSON –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ CSV —Ñ–∞–π–ª–∞
"""

import os
import sys
import json
import argparse
import subprocess
import tempfile
from pathlib import Path
from datetime import datetime
import time
from typing import Dict, List, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
from pipeline import VideoPipeline


class PipelineAPI:
    def __init__(self, output_dir: str = None, keep_temp: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –ø–∞–π–ø–ª–∞–π–Ω–∞
        
        :param output_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        :param keep_temp: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        """
        self.keep_temp = keep_temp
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if output_dir:
            self.output_dir = Path(output_dir)
        else:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            self.output_dir = Path(f"api_pipeline_output_{timestamp}")
        
        self.output_dir.mkdir(exist_ok=True)
        
        # –§–∞–π–ª –ª–æ–≥–æ–≤
        self.log_file = self.output_dir / "api_pipeline.log"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_modules = 0
        self.processed_modules = 0
        self.failed_modules = []
        self.skipped_modules = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.config = {
            'conversion': {
                'codec': 'copy',
                'quality': 23
            },
            'scene_detection': {
                'threshold': 5.0,
                'min_scene_len': 0.5,
                'detector': 'content',
                'extract_frames': True,
                'frame_type': 'middle',
                'extract_clips': False,
                'generate_html': True,
                'split_equal': None
            }
        }
        
        self._init_logging()
    
    def _init_logging(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.log_messages = []
        self._log(f"API Pipeline started: {datetime.now()}")
        self._log(f"Output directory: {self.output_dir}")
    
    def _log(self, message: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        print(log_entry)
        self.log_messages.append(log_entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(self.log_file, 'a', encoding='utf-8') as f:
            f.write(log_entry + '\n')
    
    def _sanitize_filename(self, module_name: str) -> str:
        """
        –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞–∫ –∏–º—è —Ñ–∞–π–ª–∞
        
        :param module_name: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
        :return: –û—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        """
        import re
        
        # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "7. Creating..." -> "Creating...")
        module_name = re.sub(r'^\d+\.\s*', '', module_name)
        
        # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        invalid_chars = '<>:"/\\|?*'
        for char in invalid_chars:
            module_name = module_name.replace(char, '_')
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(module_name) > 100:
            module_name = module_name[:100]
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        module_name = module_name.strip()
        
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        module_name = re.sub(r'\s+', ' ', module_name)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        module_name = module_name.replace(' ', '_')
        
        return module_name or "module"
    
    def process_course_data(self, course_data: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞
        
        :param course_data: –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        :return: –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        modules = []
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ
            course_title = course_data.get('title', 'Unknown Course')
            course_url = course_data.get('url', '')
            sections = course_data.get('sections', [])
            
            self._log(f"üìö Processing course: {course_title}")
            self._log(f"   URL: {course_url}")
            self._log(f"   Sections: {len(sections)}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—Ü–∏—é
            for section_idx, section in enumerate(sections, 1):
                section_title = section.get('title', f'Section {section_idx}')
                items = section.get('items', [])
                
                self._log(f"   üìñ Section {section_idx}: {section_title} ({len(items)} items)")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–µ–∫—Ü–∏–∏
                for item_idx, item in enumerate(items, 1):
                    item_title = item.get('title', f'Item {item_idx}')
                    video_url = item.get('videoUrl', '')
                    transcript = item.get('transcript', '')
                    
                    if video_url:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
                        full_title = f"{section_idx}.{item_idx}. {item_title}"
                        
                        modules.append({
                            'module': full_title,
                            'link': video_url,
                            'transcript': transcript,
                            'filename': self._sanitize_filename(full_title),
                            'section': section_title,
                            'item': item_title
                        })
            
            self._log(f"\nüìä Found modules to process: {len(modules)}")
            
            if modules:
                self._log("\nüìã Module list:")
                for i, m in enumerate(modules, 1):
                    self._log(f"   {i:02d}. {m['module'][:50]}...")
            
            return modules
            
        except Exception as e:
            self._log(f"‚ùå Error processing course data: {str(e)}")
            return []
    
    def step1_convert_module(self, module: Dict[str, Any]) -> bool:
        """
        –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ–¥—É–ª—è —á–µ—Ä–µ–∑ m3u8_converter
        
        :param module: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª–µ
        :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        module_name = module['module']
        link = module['link']
        filename = module['filename']
        
        self._log(f"\n{'='*50}")
        self._log(f"üé¨ STEP 1: MODULE CONVERSION")
        self._log(f"   Module: {module_name}")
        self._log(f"   Link: {link[:100]}...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥—É–ª—è
        module_dir = self.output_dir / filename
        module_dir.mkdir(exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        output_file = module_dir / f"{filename}.mp4"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if output_file.exists() and output_file.stat().st_size > 0:
            self._log(f"‚úì Video already exists, skipping conversion: {output_file.name}")
            return True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è m3u8_converter.py
        cmd = [
            sys.executable,
            "m3u8_converter.py",
            link,
            "-o", str(output_file),
            "--filename", filename,
            "--codec", self.config['conversion']['codec']
        ]
        
        if self.config['conversion']['codec'] != 'copy':
            cmd.extend(["--quality", str(self.config['conversion']['quality'])])
        
        self._log(f"   Output file: {output_file}")
        self._log(f"   Starting converter...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
            start_time = time.time()
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=1800  # 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            elapsed_time = time.time() - start_time
            
            if result.returncode == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω —Ñ–∞–π–ª
                if output_file.exists() and output_file.stat().st_size > 0:
                    size_mb = output_file.stat().st_size / (1024 * 1024)
                    self._log(f"‚úÖ Conversion successful in {elapsed_time:.1f}s")
                    self._log(f"   File size: {size_mb:.2f} MB")
                    return True
                else:
                    self._log(f"‚ùå File was not created")
                    return False
            else:
                self._log(f"‚ùå Error during conversion (code: {result.returncode})")
                if result.stderr:
                    error_lines = result.stderr.strip().split('\n')[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫ –æ—à–∏–±–æ–∫
                    for line in error_lines:
                        self._log(f"   {line}")
                return False
                
        except subprocess.TimeoutExpired:
            self._log(f"‚ùå Timeout during conversion (more than 30 minutes)")
            return False
        except Exception as e:
            self._log(f"‚ùå Error: {str(e)}")
            return False
    
    def step2_detect_scenes(self, module: Dict[str, Any]) -> bool:
        """
        –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω —á–µ—Ä–µ–∑ scene_detector
        
        :param module: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª–µ
        :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω
        """
        module_name = module['module']
        filename = module['filename']
        transcript = module.get('transcript', '')
        
        self._log(f"\n{'='*50}")
        self._log(f"üîç STEP 2: SCENE PROCESSING")
        self._log(f"   Module: {module_name}")
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        module_dir = self.output_dir / filename
        video_file = module_dir / f"{filename}.mp4"
        scenes_dir = module_dir / "scenes"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        if not video_file.exists():
            self._log(f"‚ùå Video file not found: {video_file}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å—Ü–µ–Ω—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
        if scenes_dir.exists() and any(scenes_dir.iterdir()):
            self._log(f"‚úì Scenes already processed, skipping: {scenes_dir}")
            return True
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è scene_detector.py
        cmd = [
            sys.executable,
            "scene_detector.py",
            str(video_file),
            "-o", str(scenes_dir),
            "--threshold", str(self.config['scene_detection']['threshold']),
            "--min-scene-len", str(self.config['scene_detection']['min_scene_len']),
            "--detector", self.config['scene_detection']['detector']
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if transcript:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –¥–ª–∏–Ω–æ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            transcript_file = module_dir / "transcript.txt"
            with open(transcript_file, 'w', encoding='utf-8') as f:
                f.write(transcript)
            cmd.extend(["--transcript", str(transcript_file)])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if self.config['scene_detection'].get('split_equal'):
            cmd.extend(["--split-equal", str(self.config['scene_detection']['split_equal'])])
        
        if self.config['scene_detection']['extract_frames']:
            cmd.append("--extract-frames")
            cmd.extend(["--frame-type", self.config['scene_detection']['frame_type']])
        
        if self.config['scene_detection']['extract_clips']:
            cmd.append("--extract-clips")
        
        if self.config['scene_detection']['generate_html']:
            cmd.append("--html")
        
        self._log(f"   Video file: {video_file}")
        self._log(f"   Scenes directory: {scenes_dir}")
        self._log(f"   Starting scene detector...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä
            start_time = time.time()
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=1800  # 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
            )
            
            elapsed_time = time.time() - start_time
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if result.stdout:
                for line in result.stdout.strip().split('\n'):
                    self._log(f"   {line}")
            
            if result.returncode == 0:
                self._log(f"‚úÖ Scene processing completed in {elapsed_time:.1f}s")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self._check_scene_results(scenes_dir)
                return True
            else:
                self._log(f"‚ùå Error during scene processing (code: {result.returncode})")
                if result.stderr:
                    error_lines = result.stderr.strip().split('\n')[-5:]
                    for line in error_lines:
                        self._log(f"   {line}")
                return False
                
        except subprocess.TimeoutExpired:
            self._log(f"‚ùå Timeout during scene processing (more than 30 minutes)")
            return False
        except Exception as e:
            self._log(f"‚ùå Error: {str(e)}")
            return False
    
    def _check_scene_results(self, scenes_dir: Path):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ü–µ–Ω"""
        if not scenes_dir.exists():
            return
        
        # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata_file = scenes_dir / "scenes_metadata.json"
        if metadata_file.exists():
            with open(metadata_file, 'r') as f:
                metadata = json.load(f)
                total_scenes = metadata.get('total_scenes', 0)
                self._log(f"\nüìä Scene statistics:")
                self._log(f"   Found scenes: {total_scenes}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        frames_dir = scenes_dir / "frames"
        clips_dir = scenes_dir / "clips"
        
        if frames_dir.exists():
            frame_count = len(list(frames_dir.glob("*.jpg")))
            self._log(f"   Extracted frames: {frame_count}")
        
        if clips_dir.exists():
            clip_count = len(list(clips_dir.glob("*.mp4")))
            self._log(f"   Extracted clips: {clip_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML –æ—Ç—á–µ—Ç
        html_file = scenes_dir / "summary.html"
        if html_file.exists():
            self._log(f"   üìÑ HTML report: {html_file}")
    
    def process_module(self, module: Dict[str, Any]) -> bool:
        """
        –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        
        :param module: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–¥—É–ª–µ
        :return: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        module_name = module['module']
        
        self._log(f"\n{'='*60}")
        self._log(f"üì¶ PROCESSING MODULE: {module_name}")
        self._log(f"{'='*60}")
        
        # –®–∞–≥ 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        if not self.step1_convert_module(module):
            self._log(f"‚ùå Error at conversion step")
            self.failed_modules.append(module_name)
            return False
        
        # –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ü–µ–Ω
        if not self.step2_detect_scenes(module):
            self._log(f"‚ùå Error at scene processing step")
            self.failed_modules.append(module_name)
            return False
        
        self._log(f"‚úÖ Module successfully processed")
        self.processed_modules += 1
        return True
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.keep_temp:
            self._log("\nüßπ Removing temporary files...")
            
            # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
            for module_dir in self.output_dir.iterdir():
                if module_dir.is_dir():
                    video_files = list(module_dir.glob("*.mp4"))
                    for video_file in video_files:
                        try:
                            os.remove(video_file)
                            self._log(f"   Removed: {video_file.name}")
                        except Exception as e:
                            self._log(f"   Error removing {video_file.name}: {e}")
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        report_file = self.output_dir / "api_pipeline_report.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("="*60 + "\n")
            f.write("API PIPELINE EXECUTION REPORT\n")
            f.write("="*60 + "\n\n")
            
            f.write(f"Execution time: {datetime.now()}\n")
            f.write(f"Output directory: {self.output_dir}\n\n")
            
            f.write("CONFIGURATION:\n")
            f.write(json.dumps(self.config, indent=2, ensure_ascii=False))
            f.write("\n\n")
            
            f.write("STATISTICS:\n")
            f.write("-"*40 + "\n")
            f.write(f"Total modules: {self.total_modules}\n")
            f.write(f"Successfully processed: {self.processed_modules}\n")
            f.write(f"Skipped: {len(self.skipped_modules)}\n")
            f.write(f"Errors: {len(self.failed_modules)}\n\n")
            
            if self.failed_modules:
                f.write("MODULES WITH ERRORS:\n")
                f.write("-"*40 + "\n")
                for module in self.failed_modules:
                    f.write(f"  - {module}\n")
                f.write("\n")
            
            f.write("DETAILED LOG:\n")
            f.write("-"*40 + "\n")
            for log_entry in self.log_messages:
                f.write(log_entry + '\n')
        
        self._log(f"\nüìã Report saved: {report_file}")
    
    def update_config(self, config_dict: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        for key, value in config_dict.items():
            if key in self.config and isinstance(value, dict):
                self.config[key].update(value)
            else:
                self.config[key] = value
    
    def run(self, course_data: Dict[str, Any], start_from: int = 0, max_modules: int = None) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
        
        :param course_data: –î–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
        :param start_from: –° –∫–∞–∫–æ–≥–æ –º–æ–¥—É–ª—è –Ω–∞—á–∞—Ç—å (0-based –∏–Ω–¥–µ–∫—Å)
        :param max_modules: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        self._log("\nüöÄ STARTING API PIPELINE")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
        modules = self.process_course_data(course_data)
        
        if not modules:
            self._log("‚ùå No modules to process")
            return {
                'success': False,
                'error': 'No modules found in course data',
                'output_dir': str(self.output_dir)
            }
        
        self.total_modules = len(modules)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
        end_at = len(modules)
        if max_modules:
            end_at = min(start_from + max_modules, len(modules))
        
        modules_to_process = modules[start_from:end_at]
        
        if start_from > 0 or max_modules:
            self._log(f"\nüìå Processing modules from {start_from+1} to {end_at} of {self.total_modules}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å
        start_time = time.time()
        
        for i, module in enumerate(modules_to_process, start=start_from+1):
            self._log(f"\n{'='*50}")
            self._log(f"üì¶ Progress: {i}/{self.total_modules}")
            
            if not self.process_module(module):
                self._log(f"‚ùå Error processing module {i}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if i % 5 == 0:  # –ö–∞–∂–¥—ã–µ 5 –º–æ–¥—É–ª–µ–π
                elapsed = time.time() - start_time
                avg_time = elapsed / i if i > 0 else 0
                remaining = (self.total_modules - i) * avg_time
                
                self._log(f"\n‚è±Ô∏è  Time elapsed: {self._format_time(elapsed)}")
                self._log(f"   Estimated remaining: {self._format_time(remaining)}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_time = time.time() - start_time
        
        self._log(f"\n{'='*60}")
        self._log("‚ú® API PIPELINE COMPLETED!")
        self._log(f"{'='*60}")
        self._log(f"\nüìä Final statistics:")
        self._log(f"   Total modules: {self.total_modules}")
        self._log(f"   Successfully processed: {self.processed_modules}")
        self._log(f"   Skipped: {len(self.skipped_modules)}")
        self._log(f"   Errors: {len(self.failed_modules)}")
        self._log(f"   Total time: {self._format_time(total_time)}")
        
        if self.processed_modules > 0:
            avg_time_per_module = total_time / self.processed_modules
            self._log(f"   Average time per module: {self._format_time(avg_time_per_module)}")
        
        # –û—á–∏—Å—Ç–∫–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if not self.keep_temp:
            self.cleanup()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        self.generate_report()
        
        self._log(f"\nüìÅ All results saved in: {self.output_dir}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            'success': len(self.failed_modules) == 0,
            'total_modules': self.total_modules,
            'processed_modules': self.processed_modules,
            'failed_modules': self.failed_modules,
            'skipped_modules': self.skipped_modules,
            'total_time': total_time,
            'output_dir': str(self.output_dir),
            'log_file': str(self.log_file)
        }
    
    def _format_time(self, seconds: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if seconds < 60:
            return f"{seconds:.0f}s"
        elif seconds < 3600:
            minutes = seconds // 60
            secs = seconds % 60
            return f"{minutes:.0f}m {secs:.0f}s"
        else:
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60
            return f"{hours:.0f}h {minutes:.0f}m"


def main():
    parser = argparse.ArgumentParser(
        description="API Pipeline for processing course data",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Usage examples:
  # Process course data from JSON string
  python pipeline_api.py --data '{"title": "Course", "sections": [...]}'
  
  # Process course data from JSON file
  python pipeline_api.py --data-file course_data.json
  
  # Specify output directory
  python pipeline_api.py --data '{"title": "Course", "sections": [...]}' -o results
  
  # Process with custom settings
  python pipeline_api.py --data '{"title": "Course", "sections": [...]}' --threshold 10 --extract-clips
        """
    )
    
    parser.add_argument(
        "--data",
        help="Course data as JSON string"
    )
    
    parser.add_argument(
        "--data-file",
        help="Path to JSON file with course data"
    )
    
    parser.add_argument(
        "-o", "--output",
        help="Directory for saving results",
        default=None
    )
    
    parser.add_argument(
        "--start-from",
        type=int,
        default=0,
        help="Which module to start from (0-based, default: 0)"
    )
    
    parser.add_argument(
        "--max",
        type=int,
        help="Maximum number of modules to process"
    )
    
    # Conversion parameters
    parser.add_argument(
        "--codec",
        choices=['copy', 'libx264', 'libx265'],
        default='copy',
        help="Video codec for conversion (default: copy)"
    )
    
    parser.add_argument(
        "--quality",
        type=int,
        default=23,
        help="Video quality when re-encoding (0-51, default: 23)"
    )
    
    # Scene detection parameters
    parser.add_argument(
        "--threshold",
        type=float,
        default=5.0,
        help="Scene detection threshold (1-100, default: 5)"
    )
    
    parser.add_argument(
        "--min-scene-len",
        type=float,
        default=0.5,
        help="Minimum scene length in seconds (default: 0.5)"
    )
    
    parser.add_argument(
        "--detector",
        choices=['content', 'adaptive'],
        default='content',
        help="Scene detector type (default: content)"
    )
    
    parser.add_argument(
        "--split-equal",
        type=int,
        metavar="N",
        help="Split into N equal parts instead of detection"
    )
    
    # Extraction parameters
    parser.add_argument(
        "--extract-frames",
        action="store_true",
        default=True,
        help="Extract frames from scenes (default: yes)"
    )
    
    parser.add_argument(
        "--no-extract-frames",
        dest="extract_frames",
        action="store_false",
        help="Don't extract frames"
    )
    
    parser.add_argument(
        "--frame-type",
        choices=['first', 'middle', 'last', 'best'],
        default='middle',
        help="Frame type for extraction (default: middle)"
    )
    
    parser.add_argument(
        "--extract-clips",
        action="store_true",
        help="Extract video clips for each scene"
    )
    
    parser.add_argument(
        "--no-html",
        dest="generate_html",
        action="store_false",
        default=True,
        help="Don't generate HTML report"
    )
    
    parser.add_argument(
        "--keep-temp",
        action="store_true",
        help="Keep temporary files (converted videos)"
    )
    
    args = parser.parse_args()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫—É—Ä—Å–∞
        course_data = None
        
        if args.data:
            course_data = json.loads(args.data)
        elif args.data_file:
            with open(args.data_file, 'r', encoding='utf-8') as f:
                course_data = json.load(f)
        else:
            print("‚ùå Error: Either --data or --data-file must be specified")
            sys.exit(1)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        pipeline = PipelineAPI(
            args.output,
            args.keep_temp
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = {
            'conversion': {
                'codec': args.codec,
                'quality': args.quality
            },
            'scene_detection': {
                'threshold': args.threshold,
                'min_scene_len': args.min_scene_len,
                'detector': args.detector,
                'extract_frames': args.extract_frames,
                'frame_type': args.frame_type,
                'extract_clips': args.extract_clips,
                'generate_html': args.generate_html,
                'split_equal': args.split_equal
            }
        }
        pipeline.update_config(config)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
        result = pipeline.run(
            course_data,
            start_from=args.start_from,
            max_modules=args.max
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüìã Pipeline Result:")
        print(json.dumps(result, indent=2, ensure_ascii=False))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        sys.exit(0 if result['success'] else 1)
        
    except json.JSONDecodeError as e:
        print(f"‚ùå Error parsing JSON: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
