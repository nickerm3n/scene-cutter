#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–∞
"""

import requests
import json
import time

# URL –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
BASE_URL = "http://localhost:8005"

def test_auto_processing():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–∞"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É—Ä—Å–∞")
    print("="*50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try:
        with open('test_course_with_pipeline.json', 'r', encoding='utf-8') as f:
            test_data = json.load(f)
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª test_course_with_pipeline.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    print(f"üìö –ö—É—Ä—Å: {test_data['course_data']['title']}")
    print(f"üìä –°–µ–∫—Ü–∏–π: {len(test_data['course_data']['sections'])}")
    print(f"‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞: {test_data['pipeline_config']}")
    
    try:
        print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
        response = requests.post(
            f"{BASE_URL}/api/course",
            json=test_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            print(f"   –°—Ç–∞—Ç—É—Å: {result.get('success')}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.get('message')}")
            print(f"   –°—Ç–∞—Ç—É—Å –ø–∞–π–ø–ª–∞–π–Ω–∞: {result.get('pipeline_status')}")
            print(f"   –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result.get('output_dir')}")
            print(f"   –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {result.get('note')}")
            
            print("\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...")
            print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω: python microservice/app.py")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
    except:
        print("‚ùå –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –¢–ï–°–¢ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    if not test_health():
        print("\n‚ùå –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å:")
        print("   cd microservice")
        print("   python app.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if test_auto_processing():
        print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")

if __name__ == "__main__":
    main()
