// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –±–∏–ª–¥–µ
import fs from 'fs';
import path from 'path';

function updateVersion() {
  const configPath = path.join(process.cwd(), 'browser-extension', 'config.js');
  
  try {
    let configContent = fs.readFileSync(configPath, 'utf8');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const version = `1.0.${Math.floor(now.getTime() / 1000)}`;
    const buildDate = now.toISOString();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –¥–∞—Ç—É –±–∏–ª–¥–∞
    configContent = configContent.replace(
      /VERSION:\s*"[^"]*"/,
      `VERSION: "${version}"`
    );
    
    configContent = configContent.replace(
      /BUILD_DATE:\s*new Date\(\)\.toISOString\(\)/,
      `BUILD_DATE: "${buildDate}"`
    );
    
    fs.writeFileSync(configPath, configContent);
    
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${version}`);
    console.log(`üìÖ –î–∞—Ç–∞ –±–∏–ª–¥–∞: ${buildDate}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏
updateVersion();
